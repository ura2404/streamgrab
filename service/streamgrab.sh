#!/bin/bash
set -euo pipefail

# =========================================
# üé• –°–∫—Ä–∏–ø—Ç –∑–∞–ø–∏—Å–∏ RTSP-–ø–æ—Ç–æ–∫–∞ —Å –∫–∞–º–µ—Ä—ã
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞:
#   $1 ‚Äî –ø—É—Ç—å –∫ global.conf (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
#   $2 ‚Äî –ø—É—Ç—å –∫ camera.conf (–∫–∞–º–µ—Ä–∞: –∏–º—è –∏ URL)
# =========================================

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
if ! command -v apache2 >/dev/null 2>&1; then
  echo "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω apache2"
  exit 1
fi
if ! command -v ffmpeg >/dev/null 2>&1; then
  echo "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ffmpeg"
  exit 1
fi 

# if ! php -m | grep -q '^intl$'; then
#   echo "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω php-intl"
#   exit 1
# fi 

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
GLOBAL_CONF="${1:-}"
CAMERA_CONF="${2:-}"

if [[ -z "$GLOBAL_CONF" || -z "$CAMERA_CONF" || ! -f "$GLOBAL_CONF" || ! -f "$CAMERA_CONF" ]]; then
  echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 /path/to/global.conf /path/to/camera.conf"
  exit 1
fi

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ===
source "$GLOBAL_CONF"
source "$CAMERA_CONF"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
: "${HEAP_DIR:?}"
: "${CAMERA_NAME:?}"
: "${STREAM_URL:?}"
: "${FFMPEG_PATH:?}"
: "${SCALE_RESOLUTION:?}"
: "${SEGMENT_DURATION:?}"
: "${RETENTION_DAYS:?}"
: "${MAX_FOLDER_SIZE_GB:?}"
: "${RESTART_INTERVAL:?}"
: "${PING_RETRY_INTERVAL:?}"
: "${MAX_LOG_SIZE_MB:?}"
: "${MAX_FILE_AGE_SEC:?}"

# === –ü—É—Ç–∏ ===
BASE_DIR="$HEAP_DIR/$CAMERA_NAME"
OUTPUT_DIR="$BASE_DIR/streams"
LOG_DIR="$BASE_DIR/logs"
LOG_FILE="$LOG_DIR/${CAMERA_NAME}_log.txt"

mkdir -p "$OUTPUT_DIR" "$LOG_DIR"
touch "$LOG_FILE"

# === –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ===
truncate_log_if_too_big() {
  if [[ -f "$LOG_FILE" ]]; then
    local size_bytes
    size_bytes=$(stat -c %s "$LOG_FILE")
    local max_bytes=$((MAX_LOG_SIZE_MB * 1024 * 1024))
    if (( size_bytes > max_bytes )); then
      # echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞: > $MAX_LOG_SIZE_MB MB" > "$LOG_FILE"
      tail -n 1000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è –õ–æ–≥ —É—Å–µ—á—ë–Ω –¥–æ 1000 —Å—Ç—Ä–æ–∫" >> "$LOG_FILE"
    fi
  fi
}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
log() {
  truncate_log_if_too_big
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∞—Ç–µ ===
cleanup_old_files() {
  find "$OUTPUT_DIR" -type f -name "*.mkv" -mtime +$RETENTION_DAYS -print -delete | while read -r file; do
    log "üóëÔ∏è –£–¥–∞–ª—ë–Ω –ø–æ –¥–∞—Ç–µ: $file"
  done
}

# === –û—á–∏—Å—Ç–∫–∞ –ø–æ –æ–±—ä—ë–º—É ===
enforce_folder_size_limit() {
  local size_bytes
  size_bytes=$(du -sb "$OUTPUT_DIR" | cut -f1)
  local size_gb=$((size_bytes / 1024 / 1024 / 1024))

  if (( size_gb >= MAX_FOLDER_SIZE_GB )); then
    log "‚ö†Ô∏è –ü–∞–ø–∫–∞ > $size_gb –ì–ë. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    find "$OUTPUT_DIR" -type f -name "*.mkv" -printf "%T@ %p\n" | sort -n | cut -d' ' -f2- | while read -r file; do
      rm -f "$file"
      log "üóëÔ∏è –£–¥–∞–ª—ë–Ω –ø–æ –æ–±—ä—ë–º—É: $file"
      size_bytes=$(du -sb "$OUTPUT_DIR" | cut -f1)
      size_gb=$((size_bytes / 1024 / 1024 / 1024))
      if (( size_gb < MAX_FOLDER_SIZE_GB )); then
        log "‚úÖ –û–±—ä—ë–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: $size_gb –ì–ë"
        break
      fi
    done
  fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã –ø–æ ping ===
check_camera_ping() {
  local ip
  ip=$(echo "$STREAM_URL" | sed -E 's#rtsp://([^/@]+@)?([^:/]+).*#\2#')
  ping -c 2 -W 2 "$ip" > /dev/null 2>&1
}

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
record_loop() {

    LAST_DATE=$(date +%F)

    while true; do
      cleanup_old_files
      enforce_folder_size_limit

      until check_camera_ping; do
        log "‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (ping). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ $PING_RETRY_INTERVAL —Å–µ–∫..."
        sleep "$PING_RETRY_INTERVAL"
      done

      log "‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å–∫ FFmpeg..."

      $FFMPEG_PATH -loglevel error -i "$STREAM_URL" \
        -vf scale="$SCALE_RESOLUTION" \
        -c:v libx264 -preset veryfast -crf 23 \
        -c:a aac -b:a 128k \
        -movflags +faststart \
        -f segment \
        -segment_format mkv \
        -segment_time "$SEGMENT_DURATION" \
        -reset_timestamps 1 -strftime 1 \
        "$OUTPUT_DIR/stream_%Y-%m-%d_%H-%M-%S.mkv" >> "$LOG_FILE" 2>&1 &

#            -vf "fps=1" \

      FFMPEG_PID=$!
      log "üé• FFmpeg –∑–∞–ø—É—â–µ–Ω (PID: $FFMPEG_PID)"
      START_TIME=$(date +%s)

      while true; do
        sleep 10
        CURRENT_TIME=$(date +%s)
        ELAPSED=$((CURRENT_TIME - START_TIME))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Å—É—Ç–æ–∫ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –ø–æ–ª–Ω–æ—á—å)
        CURRENT_DATE=$(date +%F)
        if [[ "$CURRENT_DATE" != "$LAST_DATE" ]]; then
          log "üïõ –ü–æ–ª–Ω–æ—á—å. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã."
          kill "$FFMPEG_PID" 2>/dev/null || kill -9 "$FFMPEG_PID" 2>/dev/null
          wait "$FFMPEG_PID" 2>/dev/null || true
          LAST_DATE="$CURRENT_DATE"
          break
        fi

        if ! ps -p "$FFMPEG_PID" > /dev/null; then
          log "‚ö†Ô∏è FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ (—Ä–∞–±–æ—Ç–∞–ª $ELAPSED —Å–µ–∫)"
          break
        fi

        LAST_FILE=$(find "$OUTPUT_DIR" -type f -name "*.mkv" -printf "%T@ %p\n" 2>/dev/null | sort -n | tail -n 1 | cut -d' ' -f2- || true)
        if [[ -n "$LAST_FILE" ]]; then
          LAST_TIME=$(stat -c %Y "$LAST_FILE")
          NOW=$(date +%s)
          AGE=$((NOW - LAST_TIME))
          if (( AGE > MAX_FILE_AGE_SEC )); then
            log "üõë FFmpeg –∑–∞–≤–∏—Å (–Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ > $MAX_FILE_AGE_SEC —Å–µ–∫). –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
            kill -9 "$FFMPEG_PID"
            break
          fi
        fi

        if (( RESTART_INTERVAL != 0 )); then
          if (( ELAPSED >= RESTART_INTERVAL )); then
            # kill "$FFMPEG_PID" || kill -9 "$FFMPEG_PID"
            kill "$FFMPEG_PID" 2>/dev/null || kill -9 "$FFMPEG_PID" 2>/dev/null
            wait "$FFMPEG_PID" 2>/dev/null || true
            log "üîÅ –ü–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ FFmpeg"
            break
          fi
        fi
      done

      sleep 2
    done
}

record_loop
